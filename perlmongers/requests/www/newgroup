#!/usr/bin/perl

use strict;

use vars qw( $title $q @validation_errors %country_codes %continent_codes);

use CGI;

use Mail::Mailer;

$title = "New Group Request Page";

%country_codes = &get_country_codes;
%continent_codes = &get_continent_codes;

$q = new CGI;

if (($q->param()) == 0)
{
	&print_page;
	exit 0;
}

if (&valid_submission)
{
	&submit_request;
	exit 0;
}

# Since we have an invalid submission, the routine valid_submission has
# set a list of errors in @validation_errors
&print_page(@validation_errors);

sub print_page
{
	my $i;

	print $q->header(),$q->start_html(-title=>$title);
	print_header();
	print "<h1>Request a New Group</h1>";
	if (@_)
	{
		print "<H1> Errors occurred in your submission.</H1><BR>\n";
		print "<H2> Please correct the following errors and resubmit.</H2><BR>\n";
		print "<BR><UL>\n";
		foreach $i (@_)
		{
			print "<LI> $i<BR>\n";
		}
		print "</UL><BR>\n";
	}

	&print_form();
	print_footer();
	print $q->end_html();
}

sub print_form
{
#foreach my $code (%country_codes)
#{
#	print $code, " - ", $country_codes{$code}, "\n";
#}
	print 
	$q->startform,
	"<table border=2>",
	  "<tr>","<td colspan=2>","Provide some general location information to help us determine if there is already a group in the area, and if not, to help in choosing a name for the new group. We need to ensure that new names do not conflict with existing ones. ",$q ->br,
	  "<tr>","<td>","City","<td>", $q->textfield('city'),$q->br,
	  "<tr>","<td>","State/Province","<td>", $q->textfield('state'),$q->br,
	  "<tr>","<td colspan=2>","Provide some general location information to help us determine if there is already a group in the area, and if not, to help in choosing a name for the new group. We need to ensure that new names do not conflict with existing ones. ",$q ->br,
	  "<tr>","<td>","Region","<td>", $q->textfield('region'),$q->br,
	  "<tr>","<td>","Country","<td>", $q->scrolling_list(-name=>'country', -values=>[(sort (keys(%country_codes)))], -size=>7, -labels=>\%country_codes),$q->br,
	  "<tr>","<td>","Continent","<td>", $q->scrolling_list(-name=>'continent', -values=>[(sort (keys(%continent_codes)))], -size=>7, -labels=>\%continent_codes),$q->br,
	  "<tr>","<td colspan=2>","The Group Leader's email address is added to the Group Leader Mailing List and an alias for groupname\@pm.org is pointed to this address.",$q ->br,
	  "<tr>","<td>","Group Leader's name","<td>", $q->textfield('leader'),$q->br,
	  "<tr>","<td>","Group Leader's email address","<td>", $q->textfield('leaderEmail'),$q->br,
	  "<tr>","<td colspan=2>","Suggest a name for the group. Groups typically end in the .pm extension and reflect the region that they serve, such as StLouis.pm. Some groups have aliases. For example, Chicago.pm is also Chi.pm",$q ->br,
	  "<tr>","<td>","Requested Group Name","<td>", $q->textfield('groupname'),$q->br,
	  "<tr>","<td colspan=2>","To set up the groupnamepm.org subdomain that you will host, we need an IP # or a machine name to point to. If you want to use Perl Mongers free Net Services, see the next box. ",$q->br,
	  "<tr>","<td>","WebSite","<td>", $q->radio_group(-name=>'web_method', -values=>['freeweb','dns'], -default=>'freeweb'),"&nbsp;&nbsp;IP", $q->textfield('IP'),
	  "<tr>","<td>","Free Email List","<td>", $q->radio_group(-name=>'freelist', -values=>['yes','no'], -default=>'yes'),$q->br,
	  $q->end_table,
	  $q->submit,$q->br,
	$q->endform;
}

sub valid_submission
{
	my $valid = 1;

	if ($q->param('leader') !~ /\S+\s+\S+/)
	{
		$valid = 0;
		push (@validation_errors, "Group Leader must be a real name.");
	}

	if ($q->param('leaderEmail') !~ /\S+@\S+\.\S+/)
	{
		$valid = 0;
		push (@validation_errors, "Group Leader Email must be a usable email address.");
	}

	if ($q->param('city') !~ /\S+/)
	{
		$valid = 0;
		push (@validation_errors, "City is required.");
	}

	if (!defined (${country_codes{$q->param('country')}}))
	{
		$valid = 0;
		push (@validation_errors, "Country incorrect.");
	}

	if (!defined (${continent_codes{$q->param('continent')}}))
	{
		$valid = 0;
		push (@validation_errors, "Continent incorrect.");
	}

	if ($q->param('groupname') !~ /\S+/)
	{
		$valid = 0;
		push (@validation_errors, "Requested Group Name is required.");
	}

	if ($valid == 1) { $title = "Request Submission Results"; }

	return $valid;
}

sub get_country_codes
{
	my @output;
	my $line = 0;
	(open CCDB, "../../../../data/country_codes.db") || die "Could not Open ../../../../data/country_codes.db: pwd = " . `pwd`;
	while (<CCDB>)
	{
		$line++;
		#die "Bad line ($line): $_" if (! /^([-A-Z()',. ]+);([A-Z][A-Z])/);
		die "Bad line ($line): $_" if (! /^([A-Z].*?);([A-Z][A-Z])/);
		push @output, $2; push @output, $1;
	}
	return @output;
}

sub get_continent_codes
{
	my @output;
	my $line = 0;
	(open CCDB, "../../../../data/continent_codes.db") || die "Could not Open continent_codes.db";
	while (<CCDB>)
	{
		$line++;
		#die "Bad line ($line): $_" if (! /^([-A-Z()',. ]+);([A-Z][A-Z])/);
		die "Bad line ($line): $_" if (! /^([A-Z].*?);([A-Z][A-Z])/);
		push @output, $2; push @output, $1;
	}
	return @output;
}
sub submit_request {
print $q->header(),$q->start_html();
print ("You will be emailed further instructions<BR><BR>");

my $now = time();
print (" Transaction ID (save for reference in case of trouble (new code)) $now.$$<BR>\n");

my $msg;
my $leaderEmail;
$leaderEmail=$q->param('leaderEmail');

$msg=qq(Someonehas requested a new Perl Monger group be created on behalf of: $leaderEmail\n
If that was you, go to the following URL and verify it:\n
http://hfb.pm.org/cgi-bin/verify_request?id=$now.$$\n
If you did not request this, ignore this process and the request till not be processed.\n);

my $mailer;
$mailer = new Mail::Mailer 'smtp', Server => "hfb.pm.org";
$mailer->open({"To" => $leaderEmail, "From" => "root\@pm.org"});
print $mailer $msg;
$mailer->close;


my $key;
open(LOGFILE,">../../../../data/requests/new/$now.$$");
foreach $key ($q->param)
{
#	print "${key}=" . $q->param($key) . "<BR>\n";
	print LOGFILE"${key}=" . $q->param($key) . "\n";
}
close(LOGFILE);
print $q->end_html();
}

sub print_header
{
	print `cat /web/www.pm.org/docs/top.shtml`;
}

sub print_footer
{
	print `cat /web/www.pm.org/docs/bottom.shtml`;
}
